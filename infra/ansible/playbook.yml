---
- name: Setup All Servers 
  hosts: all
  become: yes
  vars:
    ansible_become_pass: divops
  tasks:
    - name: Check OS version
      command: cat /etc/os-release
      register: os_info

    - name: Display OS information
      debug:
        var: os_info.stdout_lines

    - name: Update package cache (Ubuntu)
      apt:
        update_cache: yes
      when: ansible_os_family == "Debian"
      ignore_errors: yes

    - name: Update system packages (Amazon Linux)
      shell: yum update -y --skip-broken
      when: ansible_os_family == "RedHat"
      ignore_errors: yes

    - name: Install common packages (Ubuntu)
      apt:
        name:
          - git
          - curl
          - wget
          - htop
          - vim
          - unzip
          - docker.io
          - docker-compose
        state: present
      when: ansible_os_family == "Debian"

    - name: Install common packages (Amazon Linux)
      shell: |
        yum install -y git curl wget htop vim unzip yum-utils
      when: ansible_os_family == "RedHat"

    - name: Install Docker (Amazon Linux)
      shell: |
        amazon-linux-extras install docker -y
      when: ansible_os_family == "RedHat"
      ignore_errors: yes

    - name: Start and enable Docker
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Install Docker Compose (if not present)
      shell: |
        if ! command -v docker-compose &> /dev/null; then
          curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
        fi
      ignore_errors: yes

    - name: Create application user (if not exists)
      user:
        name: appuser
        shell: /bin/bash
        create_home: yes
        groups: docker
        append: yes
      ignore_errors: yes

    - name: Add existing users to docker group
      user:
        name: "{{ item }}"
        groups: docker
        append: yes
      loop:
        - ec2-user
        - ubuntu
        - appuser
      ignore_errors: yes

    - name: Test Docker installation
      shell: docker --version
      register: docker_version

    - name: Display Docker version
      debug:
        msg: "Docker: {{ docker_version.stdout }}"

- name: Setup All Services Repository
  hosts: all
  become: yes
  vars:
    ansible_become_pass: divops
  tasks:
    - name: Clone repository
      git:
        repo: https://github.com/AET-DevOps25/team-divops.git
        dest: /home/appuser/team-divops
        force: yes
      become_user: appuser

    - name: Create necessary directories
      file:
        path: "{{ item }}"
        state: directory
        owner: appuser
        group: appuser
        mode: '0755'
      loop:
        - /home/appuser/team-divops/vector-db
        - /home/appuser/team-divops/genai
        - /home/appuser/team-divops/genai/app
        - /home/appuser/team-divops/frontend
        - /home/appuser/team-divops/backend

    - name: Set ownership for team-divops directory
      file:
        path: /home/appuser/team-divops
        owner: appuser
        group: appuser
        recurse: yes

- name: Setup GenAI Server (Python + Gemini + Weaviate)
  hosts: genai
  become: yes
  vars:
    ansible_become_pass: divops  
  tasks:
    - name: Check repository structure
      shell: ls -la /home/appuser/team-divops/
      register: repo_structure
      become_user: appuser

    - name: Check if vector-db docker-compose.yml exists
      stat:
        path: /home/appuser/team-divops/vector-db/docker-compose.yml
      register: vector_db_compose_exists

    - name: Display vector-db compose status
      debug:
        msg: "Vector DB docker-compose.yml exists: {{ vector_db_compose_exists.stat.exists }}"

    - name: Stop any existing vector-db containers
      shell: |
        cd /home/appuser/team-divops/vector-db
        docker-compose down || true
      become_user: appuser
      when: vector_db_compose_exists.stat.exists
      ignore_errors: yes

    - name: Initialize Vector Database (Weaviate)
      shell: |
        cd /home/appuser/team-divops/vector-db
        docker-compose up -d
      register: vector_db_init
      become_user: appuser
      when: vector_db_compose_exists.stat.exists

    - name: Display vector-db initialization output
      debug:
        var: vector_db_init.stdout_lines
      when: vector_db_compose_exists.stat.exists

    - name: Wait for Vector Database to be ready
      pause:
        seconds: 8
        prompt: "Waiting for Vector Database to initialize..."
      when: vector_db_compose_exists.stat.exists

    - name: Check vector-db containers status
      shell: |
        cd /home/appuser/team-divops/vector-db
        docker-compose ps
      register: vector_db_status
      become_user: appuser
      when: vector_db_compose_exists.stat.exists

    - name: Display vector-db containers status
      debug:
        var: vector_db_status.stdout_lines
      when: vector_db_compose_exists.stat.exists

    - name: Test vector database connectivity (if applicable)
      uri:
        url: "{{ item }}"
        method: GET
      loop:
        - "http://localhost:8888/v1/meta"  
        - "http://localhost:8888/v1/schema" 
      register: vector_db_health
      ignore_errors: yes
      when: vector_db_compose_exists.stat.exists

    - name: Display vector database health check
      debug:
        msg: |
          Vector Database Health Check:
          {% for result in vector_db_health.results %}
          - {{ result.item }}: {{ 'OK' if result.status == 200 else 'Failed' }}
          {% endfor %}
      when: vector_db_compose_exists.stat.exists and vector_db_health is defined

    - name: Create environment file for genai
      copy:
        content: |
          PYTHONPATH=/app
          # Local Vector DB 
          LOCAL_WEAVIATE_URL=http://localhost:8888
        dest: /home/appuser/team-divops/genai/.env
        owner: appuser
        group: appuser
        mode: '0600'

    - name: Check if genai requirements.txt exists
      stat:
        path: /home/appuser/team-divops/genai/requirements.txt
      register: requirements_exists

- name: Deploy GenAI Services
  hosts: genai
  become: yes
  vars:
    ansible_become_pass: divops
  tasks:
    - name: Verify Vector Database is still running
      shell: |
        cd /home/appuser/team-divops/vector-db
        docker-compose ps
      register: vector_db_verify
      become_user: appuser
      ignore_errors: yes

    - name: Display vector-db verification
      debug:
        var: vector_db_verify.stdout_lines

    - name: Stop and remove existing GenAI container
      shell: |
        docker stop genai-container || true
        docker rm genai-container || true
      ignore_errors: yes
      become_user: appuser

    - name: Build GenAI Docker image
      shell: |
        cd /home/appuser/team-divops/genai
        docker build -t genai-app .
      register: genai_build
      become_user: appuser

    - name: Display build output
      debug:
        var: genai_build.stdout_lines

    - name: Run GenAI container (with vector-db network access)
      shell: |
        cd /home/appuser/team-divops/genai
        docker run -d \
          --name genai-container \
          --env-file .env \
          -p 8000:8000 \
          --network host \
          --restart unless-stopped \
          genai-app
      register: genai_run
      become_user: appuser

    - name: Wait for GenAI container to start
      pause:
        seconds: 8

    - name: Check GenAI container logs
      shell: docker logs genai-container
      register: genai_logs
      become_user: appuser
      ignore_errors: yes

    - name: Display GenAI container logs
      debug:
        var: genai_logs.stdout_lines

    - name: Wait for GenAI to be ready (root endpoint)
      uri:
        url: http://localhost:8000/
        method: GET
      register: genai_check_root
      until: genai_check_root.status == 200
      retries: 10
      delay: 5
      ignore_errors: yes

    - name: Wait for GenAI health endpoint
      uri:
        url: http://localhost:8000/health
        method: GET
      register: genai_check_health
      until: genai_check_health.status == 200
      retries: 10
      delay: 5
      ignore_errors: yes

    - name: Test GenAI docs endpoint
      uri:
        url: http://localhost:8000/docs
        method: GET
      register: genai_check_docs
      ignore_errors: yes

    - name: Display GenAI service status
      debug:
        msg: |
          ==========================================
          GenAI Service Deployment Status:
          
          Vector Database: {{ 'Running' if vector_db_verify.rc == 0 else 'Not Running' }}
          GenAI Container: {{ 'Running' if genai_run.rc == 0 else 'Failed to Start' }}
          
          Service Endpoints:
          - Root (/): {{ 'Working' if genai_check_root.status == 200 else 'Not responding' }}
          - Health (/health): {{ 'Working' if genai_check_health.status == 200 else 'Not responding' }}
          - Docs (/docs): {{ 'Working' if genai_check_docs.status == 200 else 'Not responding' }}
          
          URLs:
          - API: http://{{ ansible_default_ipv4.address }}:8000
          - Docs: http://{{ ansible_default_ipv4.address }}:8000/docs
          - Health: http://{{ ansible_default_ipv4.address }}:8000/health
          
          Vector Database:
          - Local Weaviate: http://{{ ansible_default_ipv4.address }}:8888/v1/meta
          ==========================================

    - name: Show all running containers
      shell: docker ps --format "table {{ "{{" }}.Names{{ "}}" }}\t{{ "{{" }}.Status{{ "}}" }}\t{{ "{{" }}.Ports{{ "}}" }}"
      register: all_containers
      become_user: appuser

    - name: Display all containers
      debug:
        var: all_containers.stdout_lines