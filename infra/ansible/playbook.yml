---
- name: Setup All Servers 
  hosts: all
  become: yes
  tasks:
    - name: Update system packages
      yum:
        name: "*"
        state: latest
        update_cache: yes

    - name: Install common packages
      yum:
        name:
          - git
          - curl
          - wget
          - htop
          - vim
          - unzip
        state: present

    - name: Install Docker repository
      shell: |
        yum install -y yum-utils
        yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

    - name: Install Docker
      yum:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present

    - name: Start and enable Docker
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Install Docker Compose
      shell: |
        curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        chmod +x /usr/local/bin/docker-compose

    - name: Create docker-compose symlink
      file:
        src: /usr/local/bin/docker-compose
        dest: /usr/bin/docker-compose
        state: link

    - name: Create application user
      user:
        name: appuser
        shell: /bin/bash
        create_home: yes
        groups: docker
        append: yes

    - name: Add ec2-user to docker group
      user:
        name: ec2-user
        groups: docker
        append: yes

- name: Setup Frontend Server (React)
  hosts: frontend
  become: yes
  tasks:
    - name: Clone React frontend repository
      git:
        repo: git@github.com:AET-DevOps25/team-divops.git
        dest: /home/appuser/team-divops
        force: yes
      become_user: appuser

    - name: Open HTTP ports in firewall
      firewalld:
        port: "{{ item }}"
        permanent: yes
        state: enabled
        immediate: yes
      loop:
        - "80/tcp"
        - "3000/tcp"
        - "443/tcp"
      ignore_errors: yes

- name: Setup Backend Server (Java Spring Boot)
  hosts: backend
  become: yes
  tasks:
    - name: Clone Java backend repository
      git:
        repo: git@github.com:AET-DevOps25/team-divops.git
        dest: /home/appuser/team-divops
        force: yes
      become_user: appuser

    - name: Open API ports in firewall
      firewalld:
        port: "{{ item }}"
        permanent: yes
        state: enabled
        immediate: yes
      loop:
        - "8080/tcp"
      ignore_errors: yes

- name: Setup GenAI Server (Python + Gemini + Weaviate)
  hosts: genai
  become: yes
  vars_files:
    - secrets.yml 
  tasks:
    - name: Clone GenAI repository
      git:
        repo: git@github.com:AET-DevOps25/team-divops.git
        dest: /home/appuser/team-divops
        force: yes
      become_user: appuser

    - name: Create environment file for GenAI
      copy:
        content: |
          GEMINI_API_KEY={{ gemini_api_key | default('your_gemini_api_key_here') }}
          WEAVIATE_URL=http://weaviate:8080
          WEAVIATE_API_KEY={{ weaviate_api_key | default('') }}
          PYTHONPATH=/app
        dest: /home/appuser/team-divops/vectordb/.env
        owner: appuser
        group: appuser
        mode: '0600'

    - name: Open GenAI ports in firewall
      firewalld:
        port: "{{ item }}"
        permanent: yes
        state: enabled
        immediate: yes
      loop:
        - "8000/tcp"
        - "8080/tcp"
      ignore_errors: yes

- name: Deploy GenAI Services
  hosts: genai
  become_user: appuser
  tasks:
    - name: Build GenAI Docker image
      shell: |
        cd /home/appuser/team-divops/genai
        docker build -t genai-app .
      register: genai_build

    - name: Stop existing GenAI container if running
      shell: docker stop genai-container || true
      ignore_errors: yes

    - name: Remove existing GenAI container
      shell: docker rm genai-container || true
      ignore_errors: yes

    - name: Run GenAI container
      shell: |
        docker run -d \
          --name genai-container \
          --env-file /home/appuser/team-divops/vectordb/.env \
          -p 8000:8000 \
          --network bridge \
          genai-app
      register: genai_run

    - name: Deploy Weaviate with docker-compose
      shell: |
        cd /home/appuser/team-divops/vectordb
        docker-compose down weaviate || true
        docker-compose up -d weaviate
      register: weaviate_deploy

    - name: Wait for Weaviate to be ready
      uri:
        url: http://localhost:8080/v1/meta
        method: GET
      register: weaviate_check
      until: weaviate_check.status == 200
      retries: 30
      delay: 10
      ignore_errors: yes

    - name: Wait for GenAI to be ready
      uri:
        url: http://localhost:8000/health
        method: GET
      register: genai_check
      until: genai_check.status == 200
      retries: 20
      delay: 10
      ignore_errors: yes

- name: Deploy Backend Services
  hosts: backend
  become_user: appuser
  tasks:
    - name: Deploy Backend with existing docker-compose
      shell: |
        cd /home/appuser/team-divops/backend
        docker-compose down || true
        docker-compose up -d --build
      register: backend_deploy

    - name: Wait for Backend to be ready
      uri:
        url: http://localhost:8080/health
        method: GET
      register: backend_check
      until: backend_check.status == 200
      retries: 20
      delay: 15
      ignore_errors: yes

- name: Deploy Frontend Services
  hosts: frontend
  become_user: appuser
  tasks:
    - name: Deploy Frontend with existing docker-compose
      shell: |
        cd /home/appuser/team-divops/frontend
        docker-compose down || true
        docker-compose up -d --build
      register: frontend_deploy

    - name: Wait for Frontend to be ready
      uri:
        url: http://localhost:80
        method: GET
      register: frontend_check
      until: frontend_check.status == 200
      retries: 15
      delay: 10
      ignore_errors: yes

- name: Configure Inter-Service Communication
  hosts: all
  become: yes
  tasks:
    - name: Update /etc/hosts for service discovery
      lineinfile:
        path: /etc/hosts
        line: "{{ hostvars[item]['ansible_default_ipv4']['address'] }} {{ item }}"
        state: present
      loop:
        - frontend
        - backend
        - genai

- name: Final Health Checks and Information
  hosts: all
  become: yes
  tasks:
    - name: Restart firewalld
      systemd:
        name: firewalld
        state: restarted
      ignore_errors: yes

    - name: Display deployment status
      debug:
        msg: |
          ==========================================
          Server: {{ inventory_hostname }}
          IP: {{ ansible_default_ipv4.address }}
          Role: {{ group_names[0] }}
          
          Services Status:
          {% if 'frontend' in group_names %}
          - React App: http://{{ ansible_default_ipv4.address }}
          - React Dev: http://{{ ansible_default_ipv4.address }}:3000
          {% elif 'backend' in group_names %}
          - Java Spring Boot API: http://{{ ansible_default_ipv4.address }}:8080
          {% elif 'genai' in group_names %}
          - Python FastAPI: http://{{ ansible_default_ipv4.address }}:8000
          - Weaviate DB: http://{{ ansible_default_ipv4.address }}:8080
          {% endif %}
          ==========================================

    - name: Show Docker containers status
      shell: docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
      register: docker_status
      become_user: appuser

    - name: Display Docker status
      debug:
        var: docker_status.stdout_lines

    - name: Show logs for troubleshooting (last 20 lines)
      shell: |
        echo "=== Docker Compose Logs ==="
        {% if 'frontend' in group_names %}
        cd /home/appuser/team-divops/frontend
        {% elif 'backend' in group_names %}
        cd /home/appuser/team-divops/backend
        {% elif 'genai' in group_names %}
        cd /home/appuser/team-divops/vectordb
        {% endif %}
        docker-compose logs --tail=20
      register: compose_logs
      become_user: appuser
      ignore_errors: yes

    - name: Display recent logs
      debug:
        var: compose_logs.stdout_lines
      when: compose_logs.stdout_lines is defined