import org.flywaydb.gradle.task.AbstractFlywayTask

plugins {
    id 'application'
    id 'org.springframework.boot' version '3.4.5'
    id 'java'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'org.flywaydb.flyway' version '10.12.0'
}

ext {
    springCloudVersion = '2024.0.1'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
    runtimeOnly    'org.postgresql:postgresql:42.7.2'


    /* PostgreSQL + migrations */
    runtimeOnly 'org.postgresql:postgresql:42.7.2'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'com.example.userservice.UserServiceApplication'
}


tasks.withType(AbstractFlywayTask).configureEach {
    outputs.doNotCacheIf("Flyway not CC-ready") { true }
}
/* ── Flyway plugin settings ──────────────────────────────── */
flyway {
    url      = System.getenv('USER_DB_URL')
    user     = System.getenv('USER_DB_USERNAME')
    password = System.getenv('USER_DB_PASSWORD')

    /* Use the app’s runtime class-path (includes the driver) */
    configurations = ['runtimeClasspath']
}

/* Disable configuration-cache just for Flyway tasks */
tasks.withType(AbstractFlywayTask).configureEach {
    outputs.doNotCacheIf("Flyway not CC-ready") { true }
}